'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLMixed = exports.GraphQLDate = exports.GraphQLBuffer = undefined;

var _graphql = require('graphql');

/**
 * Buffer type
 */
const coerceBuffer = value => {
  if (value instanceof Buffer) return value;
  throw new TypeError(`Type error: ${ value } is not instance of Buffer`);
};

const GraphQLBuffer = exports.GraphQLBuffer = new _graphql.GraphQLScalarType({
  name: 'Buffer',
  serialize: coerceBuffer, // serialize to query result
  parseValue: coerceBuffer,
  parseLiteral: ast => {
    // Read from args
    return typeof ast.value === 'string' && new Buffer(ast.value) || null;
  }
});

/**
 * Date type
 */
const coerceDate = value => {
  if (value instanceof Date) return value;
  throw new TypeError(`Type error: ${ value } is not instance of Date`);
};

const GraphQLDate = exports.GraphQLDate = new _graphql.GraphQLScalarType({
  name: 'Date',
  serialize: coerceDate,
  parseValue: coerceDate,
  parseLiteral: ast => {
    const d = new Date(ast.value);
    return !isNaN(d.getTime()) && d || null;
  }
});

/**
 * Mixed type
 */
const GraphQLMixed = exports.GraphQLMixed = new _graphql.GraphQLScalarType({
  name: 'Mixed',
  serialize: value => value,
  parseValue: value => value,
  parseLiteral: ast => ast.value
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlL2N1c3RvbVR5cGUuanMiXSwibmFtZXMiOlsiY29lcmNlQnVmZmVyIiwidmFsdWUiLCJCdWZmZXIiLCJUeXBlRXJyb3IiLCJHcmFwaFFMQnVmZmVyIiwibmFtZSIsInNlcmlhbGl6ZSIsInBhcnNlVmFsdWUiLCJwYXJzZUxpdGVyYWwiLCJhc3QiLCJjb2VyY2VEYXRlIiwiRGF0ZSIsIkdyYXBoUUxEYXRlIiwiZCIsImlzTmFOIiwiZ2V0VGltZSIsIkdyYXBoUUxNaXhlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7QUFHQSxNQUFNQSxlQUFnQkMsS0FBRCxJQUFXO0FBQzlCLE1BQUlBLGlCQUFpQkMsTUFBckIsRUFBNkIsT0FBT0QsS0FBUDtBQUM3QixRQUFNLElBQUlFLFNBQUosQ0FBZSxnQkFBY0YsS0FBTSw2QkFBbkMsQ0FBTjtBQUNELENBSEQ7O0FBS08sTUFBTUcsd0NBQWdCLCtCQUFzQjtBQUNqREMsUUFBTSxRQUQyQztBQUVqREMsYUFBV04sWUFGc0MsRUFFeEI7QUFDekJPLGNBQVlQLFlBSHFDO0FBSWpEUSxnQkFBY0MsT0FBTztBQUNuQjtBQUNBLFdBQU8sT0FBT0EsSUFBSVIsS0FBWCxLQUFxQixRQUFyQixJQUFpQyxJQUFJQyxNQUFKLENBQVdPLElBQUlSLEtBQWYsQ0FBakMsSUFBMEQsSUFBakU7QUFDRDtBQVBnRCxDQUF0QixDQUF0Qjs7QUFVUDs7O0FBR0EsTUFBTVMsYUFBY1QsS0FBRCxJQUFXO0FBQzVCLE1BQUlBLGlCQUFpQlUsSUFBckIsRUFBMkIsT0FBT1YsS0FBUDtBQUMzQixRQUFNLElBQUlFLFNBQUosQ0FBZSxnQkFBY0YsS0FBTSwyQkFBbkMsQ0FBTjtBQUNELENBSEQ7O0FBS08sTUFBTVcsb0NBQWMsK0JBQXNCO0FBQy9DUCxRQUFNLE1BRHlDO0FBRS9DQyxhQUFXSSxVQUZvQztBQUcvQ0gsY0FBWUcsVUFIbUM7QUFJL0NGLGdCQUFjQyxPQUFPO0FBQ25CLFVBQU1JLElBQUksSUFBSUYsSUFBSixDQUFTRixJQUFJUixLQUFiLENBQVY7QUFDQSxXQUFPLENBQUNhLE1BQU1ELEVBQUVFLE9BQUYsRUFBTixDQUFELElBQXVCRixDQUF2QixJQUE0QixJQUFuQztBQUNEO0FBUDhDLENBQXRCLENBQXBCOztBQVVQOzs7QUFHTyxNQUFNRyxzQ0FBZSwrQkFBc0I7QUFDaERYLFFBQU0sT0FEMEM7QUFFaERDLGFBQVdMLFNBQVNBLEtBRjRCO0FBR2hETSxjQUFZTixTQUFTQSxLQUgyQjtBQUloRE8sZ0JBQWNDLE9BQU9BLElBQUlSO0FBSnVCLENBQXRCLENBQXJCIiwiZmlsZSI6ImN1c3RvbVR5cGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMU2NhbGFyVHlwZSB9IGZyb20gJ2dyYXBocWwnXG5cbi8qKlxuICogQnVmZmVyIHR5cGVcbiAqL1xuY29uc3QgY29lcmNlQnVmZmVyID0gKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlcikgcmV0dXJuIHZhbHVlXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoYFR5cGUgZXJyb3I6ICR7dmFsdWV9IGlzIG5vdCBpbnN0YW5jZSBvZiBCdWZmZXJgKVxufVxuXG5leHBvcnQgY29uc3QgR3JhcGhRTEJ1ZmZlciA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdCdWZmZXInLFxuICBzZXJpYWxpemU6IGNvZXJjZUJ1ZmZlciwgLy8gc2VyaWFsaXplIHRvIHF1ZXJ5IHJlc3VsdFxuICBwYXJzZVZhbHVlOiBjb2VyY2VCdWZmZXIsXG4gIHBhcnNlTGl0ZXJhbDogYXN0ID0+IHtcbiAgICAvLyBSZWFkIGZyb20gYXJnc1xuICAgIHJldHVybiB0eXBlb2YgYXN0LnZhbHVlID09PSAnc3RyaW5nJyAmJiBuZXcgQnVmZmVyKGFzdC52YWx1ZSkgfHwgbnVsbFxuICB9XG59KVxuXG4vKipcbiAqIERhdGUgdHlwZVxuICovXG5jb25zdCBjb2VyY2VEYXRlID0gKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB2YWx1ZVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUeXBlIGVycm9yOiAke3ZhbHVlfSBpcyBub3QgaW5zdGFuY2Ugb2YgRGF0ZWApXG59XG5cbmV4cG9ydCBjb25zdCBHcmFwaFFMRGF0ZSA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdEYXRlJyxcbiAgc2VyaWFsaXplOiBjb2VyY2VEYXRlLFxuICBwYXJzZVZhbHVlOiBjb2VyY2VEYXRlLFxuICBwYXJzZUxpdGVyYWw6IGFzdCA9PiB7XG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKGFzdC52YWx1ZSlcbiAgICByZXR1cm4gIWlzTmFOKGQuZ2V0VGltZSgpKSAmJiBkIHx8IG51bGxcbiAgfVxufSlcblxuLyoqXG4gKiBNaXhlZCB0eXBlXG4gKi9cbmV4cG9ydCBjb25zdCBHcmFwaFFMTWl4ZWQgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnTWl4ZWQnLFxuICBzZXJpYWxpemU6IHZhbHVlID0+IHZhbHVlLFxuICBwYXJzZVZhbHVlOiB2YWx1ZSA9PiB2YWx1ZSxcbiAgcGFyc2VMaXRlcmFsOiBhc3QgPT4gYXN0LnZhbHVlXG59KVxuIl19